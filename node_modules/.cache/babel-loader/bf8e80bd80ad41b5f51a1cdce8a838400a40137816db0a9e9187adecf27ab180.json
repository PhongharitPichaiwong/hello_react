{"ast":null,"code":"var _jsxFileName = \"/Users/phongharit/Development/hello_react/hello-react/src/hooks/useTheme.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { createContext, useContext, useEffect, useState } from 'react';\n\n// Define the context type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const [data, setData] = useState(null);\n  const fetchData = async () => {\n    try {\n      setData({});\n    } catch (error) {}\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      setTheme,\n      data\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"WFyTBQST+rtrNCDibVJ9p+eRlbM=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nconst Sample = () => {\n  _s3();\n  const {\n    theme,\n    setTheme,\n    data\n  } = useTheme();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Current Theme: \", theme]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setTheme(theme === 'light' ? 'dark' : 'light'),\n      children: \"Toggle Theme\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(data, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s3(Sample, \"vWKe9GM4kZTnDp3VZ4FuWs8U7Rw=\", false, function () {\n  return [useTheme];\n});\n_c2 = Sample;\nvar _c, _c2;\n$RefreshReg$(_c, \"ThemeProvider\");\n$RefreshReg$(_c2, \"Sample\");","map":{"version":3,"names":["createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","data","setData","fetchData","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","Sample","_s3","onClick","JSON","stringify","_c2","$RefreshReg$"],"sources":["/Users/phongharit/Development/hello_react/hello-react/src/hooks/useTheme.tsx"],"sourcesContent":["import {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode,\n} from 'react';\n\n// Define the context type\ninterface ThemeContextType {\n  theme: string;\n  setTheme: React.Dispatch<React.SetStateAction<string>>;\n  data: Object | null;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport const ThemeProvider = ({ children }: { children: ReactNode }) => {\n  const [theme, setTheme] = useState<string>('light');\n  const [data, setData] = useState<Object | null>(null);\n\n  const fetchData = async () => {\n    try {\n      setData({});\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, data }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n\nconst Sample = () => {\n  const { theme, setTheme, data } = useTheme();\n\n  return (\n    <div>\n      <h1>Current Theme: {theme}</h1>\n      <button onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}>\n        Toggle Theme\n      </button>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n};\n"],"mappings":";;;;AAAA,SACEA,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,QAAQ,QAEH,OAAO;;AAEd;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAOA,MAAMC,YAAY,gBAAGN,aAAa,CAA+BO,SAAS,CAAC;AAE3E,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,EAAA;EACtE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAS,OAAO,CAAC;EACnD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAgB,IAAI,CAAC;EAErD,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACFD,OAAO,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,OAAOE,KAAK,EAAE,CAAC;EACnB,CAAC;EAEDd,SAAS,CAAC,MAAM;IACda,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA,CAACC,YAAY,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAEP,KAAK;MAAEC,QAAQ;MAAEC;IAAK,CAAE;IAAAJ,QAAA,EACrDA;EAAQ;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACZ,EAAA,CAnBWF,aAAa;AAAAe,EAAA,GAAbf,aAAa;AAqB1B,OAAO,MAAMgB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGzB,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACoB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAQrB,MAAMI,MAAM,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACnB,MAAM;IAAElB,KAAK;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAGW,QAAQ,CAAC,CAAC;EAE5C,oBACEnB,OAAA;IAAAI,QAAA,gBACEJ,OAAA;MAAAI,QAAA,GAAI,iBAAe,EAACE,KAAK;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/BjB,OAAA;MAAQyB,OAAO,EAAEA,CAAA,KAAMlB,QAAQ,CAACD,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO,CAAE;MAAAF,QAAA,EAAC;IAEvE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTjB,OAAA;MAAAI,QAAA,EAAMsB,IAAI,CAACC,SAAS,CAACnB,IAAI,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV,CAAC;AAACO,GAAA,CAZID,MAAM;EAAA,QACwBJ,QAAQ;AAAA;AAAAS,GAAA,GADtCL,MAAM;AAAA,IAAAL,EAAA,EAAAU,GAAA;AAAAC,YAAA,CAAAX,EAAA;AAAAW,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}