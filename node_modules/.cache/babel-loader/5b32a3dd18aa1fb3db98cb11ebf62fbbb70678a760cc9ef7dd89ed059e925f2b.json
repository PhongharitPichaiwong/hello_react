{"ast":null,"code":"const API_BASE_URL = 'https://dummyjson.com';\nclass AuthService {\n  async login(credentials) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/user/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: credentials.username,\n          password: credentials.password,\n          expiresInMins: credentials.expiresInMins || 30\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Login failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Login failed');\n    }\n  }\n  async getCurrentUser(token) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch user: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Failed to fetch user');\n    }\n  }\n  async refreshToken(refreshToken) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Token refresh failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Token refresh failed');\n    }\n  }\n\n  // Local storage helpers\n  saveTokens(accessToken, refreshToken) {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n  getStoredTokens() {\n    return {\n      accessToken: localStorage.getItem('accessToken'),\n      refreshToken: localStorage.getItem('refreshToken')\n    };\n  }\n  clearTokens() {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["API_BASE_URL","AuthService","login","credentials","response","fetch","method","headers","body","JSON","stringify","username","password","expiresInMins","ok","Error","statusText","json","error","message","getCurrentUser","token","Authorization","refreshToken","saveTokens","accessToken","localStorage","setItem","getStoredTokens","getItem","clearTokens","removeItem","authService"],"sources":["/Users/phongharit/Development/hello_react/src/services/authService.ts"],"sourcesContent":["import { LoginCredentials, LoginResponse, User } from '../types/auth';\n\nconst API_BASE_URL = 'https://dummyjson.com';\n\nclass AuthService {\n  async login(credentials: LoginCredentials): Promise<LoginResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/user/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          username: credentials.username,\n          password: credentials.password,\n          expiresInMins: credentials.expiresInMins || 30,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Login failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw new Error(error instanceof Error ? error.message : 'Login failed');\n    }\n  }\n\n  async getCurrentUser(token: string): Promise<User> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/me`, {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to fetch user: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw new Error(\n        error instanceof Error ? error.message : 'Failed to fetch user'\n      );\n    }\n  }\n\n  async refreshToken(refreshToken: string): Promise<{ accessToken: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/refresh`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ refreshToken }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Token refresh failed: ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      throw new Error(\n        error instanceof Error ? error.message : 'Token refresh failed'\n      );\n    }\n  }\n\n  // Local storage helpers\n  saveTokens(accessToken: string, refreshToken: string): void {\n    localStorage.setItem('accessToken', accessToken);\n    localStorage.setItem('refreshToken', refreshToken);\n  }\n\n  getStoredTokens(): {\n    accessToken: string | null;\n    refreshToken: string | null;\n  } {\n    return {\n      accessToken: localStorage.getItem('accessToken'),\n      refreshToken: localStorage.getItem('refreshToken'),\n    };\n  }\n\n  clearTokens(): void {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n  }\n}\n\nexport const authService = new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}