{"ast":null,"code":"var _jsxFileName = \"/Users/phongharit/Development/hello_react/src/provider/AuthProvider.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const isAuthenticated = !!user && !!token;\n  useEffect(() => {\n    const checkExistingAuth = async () => {\n      const {\n        accessToken\n      } = authService.getStoredTokens();\n      if (accessToken) {\n        try {\n          setIsLoading(true);\n          const userData = await authService.getCurrentUser(accessToken);\n          setUser(userData);\n          setToken(accessToken);\n        } catch (error) {\n          authService.clearTokens();\n          setUser(null);\n          setToken(null);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n    checkExistingAuth();\n  }, []);\n  const login = async credentials => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await authService.login(credentials);\n      authService.saveTokens(response.accessToken, response.refreshToken);\n      const userData = {\n        id: response.id,\n        username: response.username,\n        email: response.email,\n        firstName: response.firstName,\n        lastName: response.lastName,\n        gender: response.gender,\n        image: response.image\n      };\n      setUser(userData);\n      setToken(response.accessToken);\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Login failed';\n      setError(errorMessage);\n      setUser(null);\n      setToken(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    authService.clearTokens();\n    setUser(null);\n    setToken(null);\n    setError(null);\n  };\n  const clearError = () => {\n    setError(null);\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    logout,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"nKDVCcMAYpwocKjEhfpxeErhncQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isLoading","setIsLoading","error","setError","isAuthenticated","checkExistingAuth","accessToken","getStoredTokens","userData","getCurrentUser","clearTokens","login","credentials","response","saveTokens","refreshToken","id","username","email","firstName","lastName","gender","image","errorMessage","Error","message","logout","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/phongharit/Development/hello_react/src/provider/AuthProvider.tsx"],"sourcesContent":["import { createContext, ReactNode, useEffect, useState } from 'react';\nimport { authService } from '../services/authService';\nimport { LoginCredentials, User } from '../types/auth';\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  login: (credentials: LoginCredentials) => Promise<void>;\n  logout: () => void;\n  clearError: () => void;\n}\n\nexport const AuthContext = createContext<AuthContextType | undefined>(\n  undefined\n);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const isAuthenticated = !!user && !!token;\n\n  useEffect(() => {\n    const checkExistingAuth = async () => {\n      const { accessToken } = authService.getStoredTokens();\n\n      if (accessToken) {\n        try {\n          setIsLoading(true);\n          const userData = await authService.getCurrentUser(accessToken);\n          setUser(userData);\n          setToken(accessToken);\n        } catch (error) {\n          authService.clearTokens();\n          setUser(null);\n          setToken(null);\n        } finally {\n          setIsLoading(false);\n        }\n      }\n    };\n\n    checkExistingAuth();\n  }, []);\n\n  const login = async (credentials: LoginCredentials): Promise<void> => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await authService.login(credentials);\n\n      authService.saveTokens(response.accessToken, response.refreshToken);\n\n      const userData: User = {\n        id: response.id,\n        username: response.username,\n        email: response.email,\n        firstName: response.firstName,\n        lastName: response.lastName,\n        gender: response.gender,\n        image: response.image,\n      };\n\n      setUser(userData);\n      setToken(response.accessToken);\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : 'Login failed';\n      setError(errorMessage);\n      setUser(null);\n      setToken(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = (): void => {\n    authService.clearTokens();\n    setUser(null);\n    setToken(null);\n    setError(null);\n  };\n\n  const clearError = (): void => {\n    setError(null);\n  };\n\n  const value: AuthContextType = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    error,\n    login,\n    logout,\n    clearError,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}